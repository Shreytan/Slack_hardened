name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test

    - name: Run security audit
      run: npm audit --audit-level=moderate

  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Build Docker image
      run: docker build -t slack-backend-hardened .

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8000:8000 \
          -e NODE_ENV=test \
          -e PORT=8000 \
          -e DATABASE_URL=sqlite::memory: \
          -e ENCRYPTION_KEY=test-key-32-chars-long-for-testing \
          slack-backend-hardened
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Render
      if: ${{ secrets.RENDER_API_KEY }}
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

    - name: Notify deployment success
      if: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"text": "íº€ Slack Backend Hardened deployed successfully!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
